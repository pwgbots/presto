"""
Copyright (c) 2022 Delft University of Technology

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

"""
Django settings for Presto project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
SETTINGS_DIR = Path(__file__).resolve().parent

# directory for daily log files written to by log_message() in utils.py
LOG_DIR = os.environ.get('LOG_DIR', os.path.join(BASE_DIR, 'log'))

# needed for workaround when opening uploaded documents in download.py
LEADING_SLASH = os.environ.get('LEADING_SLASH', '')

#if not set through environment ( docker) then user False
USE_SAML_STR = os.environ.get('USE_SAML', 'False')
USE_SAML = USE_SAML_STR == 'True'

if USE_SAML is True:
    import saml2
    from saml2 import BINDING_HTTP_REDIRECT, BINDING_URI
    from saml2 import BINDING_HTTP_ARTIFACT
    from saml2 import BINDING_HTTP_POST
    from saml2 import BINDING_SOAP
    from saml2.saml import NAME_FORMAT_URI
    from saml2.saml import NAMEID_FORMAT_TRANSIENT
    from saml2.saml import NAMEID_FORMAT_PERSISTENT

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-p39$@gsp-2z44y)_wlkk9yrqa=p(mqlrmb5kj1skrrn@f!!gik'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG_STR = os.environ.get('DEBUG', 'True')
DEBUG = DEBUG_STR == 'True'

ALLOWED_HOSTS = ['127.0.0.1', '192.168.2.15', 'presto.tudelft.nl']

# if DEBUG is false, send mail to admin when error 500 occurs
admins = os.environ.get('ADMINS', "(('Pieter Bots', 'p.w.g.bots@tudelft.nl'),)")
ADMINS = eval(admins)
SERVER_EMAIL = os.environ.get('SERVER_EMAIL', 'no-reply@presto.tudelft.nl')
EMAIL_FROM = u'Presto Administrator'
ERROR_EMAIL = ''
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'dutmail.tudelft.nl'
EMAIL_HOST_USER = 'noreply@tudelft.nl'
EMAIL_PORT = 25


# Application definition

if USE_SAML is True:    
    INSTALLED_APPS = [
        'presto.apps.PrestoConfig',

        'django.contrib.admin.apps.SimpleAdminConfig',    

        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        
        'djangosaml2',  # only *addition* if USE_SAML is True
    ]
else:
    INSTALLED_APPS = [
        'presto.apps.PrestoConfig',

        'django.contrib.admin',  # only difference if USE_SAML is False

        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'presto_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'string_if_invalid': '%s',  # REMOVE THIS AFTER DEBUGGING!!
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'presto_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

if USE_SAML is False:
    # On developer's computer use local SQLlite database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

else:
    # On production server use MySQL
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('DB_NAME', 'presto'),
            'USER': os.environ.get('DB_USER', 'presto'),
            'PASSWORD': os.environ.get('DB_PASSWORD', 'presto'),
            'HOST': os.environ.get('DB_HOST', '127.0.0.1'),
            'PORT': os.environ.get('DB_PORT', '3306'),
            'OPTIONS': {
                'init_command': 'SET storage_engine=InnoDB;SET sql_mode="STRICT_TRANS_TABLES"'
            }
        },
    }


if USE_SAML is False:
    AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.ModelBackend',
    )
    LOGIN_URL = '/admin/login/'
    
    # used only in demo-login view
    DEMO_USR_BACKEND = 'django.contrib.auth.backends.ModelBackend'

else: 
    AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    #'djangosaml2.backends.Saml2Backend',
    'presto-project.backends.MySaml2Backend',
    )

    # used only in demo-login view
    DEMO_USR_BACKEND = 'presto-project.backends.MySaml2Backend'  # 'djangosaml2.backends.Saml2Backend'

    # -----SAML Settings -----
    LOGIN_URL = '/saml2/login/'
    LOGOUT_URL = '/saml2/logout/'
    SESSION_EXPIRE_AT_BROWSER_CLOSE = True
    
    SAML_CONFIG = {
        # full path to the xmlsec1 binary programm
        'xmlsec_binary': '/usr/bin/xmlsec1',
      
        # your entity id, usually your subdomain plus the url to the metadata view
        'entityid': 'https://presto.tudelft.nl',
      
        # directory with attribute mapping
        'attribute_map_dir': os.path.join(BASE_DIR, 'saml/attribute-maps'),
        'allow_unknown_attributes': True,
      
        # this block states what services we provide
        'service': {
            # we are just a lonely SP
            'sp': {
                'name': 'Presto',
                'name_id_format': NAMEID_FORMAT_PERSISTENT,
                'endpoints': {
                    # url and binding to the assetion consumer service view
                    # do not change the binding or service name
                    'assertion_consumer_service': [
                        ('https://presto.tudelft.nl/saml2/acs/',
                         BINDING_HTTP_POST),
                    ],
                    # url and binding to the single logout service view
                    # do not change the binding or service name
                    'single_logout_service': [
                        ('https://presto.tudelft.nl/saml2/ls/',
                         BINDING_HTTP_REDIRECT),
                    ],
                },
      
                # attributes that this project need to identify a user
                'required_attributes': ['uid'],
                # attributes that may be useful to have but not required
                #'optional_attributes': ['eduPersonAffiliation', 'sn', 'mail'],
                
                'authn_requests_signed': True,
                'want_assertions_signed': False,
                'want_responses_signed': True,
      
                'allow_unknown_attributes': True,
            },
        },
      
        # where the remote metadata is stored
        'metadata': {
            'local': [os.path.join(BASE_DIR, 'saml/metadata/metadata.xml')],
        },
      
        # set to 1 to output debugging information
        'debug': 1,
      
        # certificate
        'key_file': os.path.join(BASE_DIR, 'saml/cert/saml.key'),  # private part
        'cert_file': os.path.join(BASE_DIR, 'saml/cert/saml.crt'),  # public part
      
        # own metadata settings
        'contact_person': [
            {'given_name': 'Marcel',
             'sur_name': 'Heijink',
             'company': 'TU Delft',
             'email_address': 'm.j.heijink@tudelft.nl',
             'contact_type': 'technical'},
        ],
        # you can set multilanguage information here
        'organization': {
            'name': [('TU Delft', 'nl'), ('University of Technology', 'en')],
            'display_name': [('TU Delft', 'nl'), ('TU Delft', 'en')],
            'url': [('http://www.tudelft.nl', 'nl'), ('http://www.tudelft.nl', 'en')],
        },
        # 'valid_for': 24,  # how long is our metadata valid
    }

    USE_GATEKEEPER = False

    if USE_GATEKEEPER:
        SAML_CONFIG['metadata'] = {
            'local': [os.path.join(BASE_DIR, 'saml/metadata/metadata-gatekeeper.xml')],
        }
        SAML_ATTRIBUTE_MAPPING = {
            'urn:mace:dir:attribute-def:uid': ('username',),
            'urn:mace:dir:attribute-def:mail': ('email',),
            'urn:mace:dir:attribute-def:sn': ('last_name',),
            'urn:mace:dir:attribute-def:givenName': ('first_name',),
        }
    else:
        SAML_CONFIG['metadata'] = {
            'local': [os.path.join(BASE_DIR, 'saml/metadata/metadata-login.xml')],
        }
        SAML_ATTRIBUTE_MAPPING = {
            'uid': ('username',),
            'mail': ('email',),
            'sn': ('last_name',),
            'givenName': ('first_name',),
        }

    """
    SAML_ATTRIBUTE_MAPPING = {
        'urn:mace:dir:attribute-def:uid': ('username',),
        'mail': ('email',),
        'sn': ('last_name',),
        'givenName': ('first_name',),
    }
    """

    SAML_CREATE_UNKNOWN_USER = True
    SAML_DJANGO_USER_MAIN_ATTRIBUTE = 'username'


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Amsterdam'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = 'static/'
MEDIA_ROOT = '/upload/'
PRESTO_URL = 'https://presto.tudelft.nl'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# path to pdftotext (must be empty string for Unix)
PDF_TO_TEXT_DIR = ''
# command to execute pdftotext (must be installed)
PDF_TO_TEXT_CMD = 'pdftotext'

# path to directory for images
IMAGE_DIR = os.path.join(BASE_DIR, 'static', 'presto', 'images')

# path to directory for fonts (referred to in progress.py)
FONT_DIR = os.path.join(BASE_DIR, 'static', 'presto', 'fonts')

# directory for badge icon images -- NOT in static, as this image should not be public
BADGE_DIR = os.path.join(BASE_DIR, 'badge_icons')

# parameters for encrypting badges
# NOTE: keep these secret for production version!
BADGE_SALT = 'k287{Yn=gF98wn*&%oc9n8[@q67b9~86(*^b(#*H9*^@jBBCL,_HG-W}Dapo'
BADGE_ITERATIONS = 56793

# username of "dummy user" that can enroll multiple times in a course
# NOTE: only this demo_user can have multiple sessions, each focusing on a single "dummy"
DEMO_USER_NAME = 'prestodemo'

# IP address (to be set by generic request)
USER_IP = 'unknown'

# allow up to 2 MB per upload file
MAX_UPLOAD_SIZE = 2.0

# mail address for Picture Queue functionality
# NOTE: keep these secret for production version!
PICTURE_QUEUE_MAIL = 'pq@modelleren.info'
PICTURE_QUEUE_SERVER = 'pop.1and1.fr'
PICTURE_QUEUE_PWD = 'P!ctur3Qu3u3'

# NOTE: on developer's computer, some constants must be changed
if USE_SAML is False:
    # empty string indicates that base url is to be inferred from the request
    PRESTO_URL = ''
    
    # upload directory is sub-directory of BASE_DIR
    MEDIA_ROOT = os.path.join(BASE_DIR, 'upload')
    
    # images and fonts directories need extra 'presto' prefix
    IMAGE_DIR = os.path.join(BASE_DIR, 'presto', 'static', 'presto', 'images')
    FONT_DIR = os.path.join(BASE_DIR, 'presto', 'static', 'presto', 'fonts')
    
    # Download pdftotext from https://www.xpdfreader.com, and install it.
    # NOTE: Enclose path with double quotes when it contains spaces!
    PDF_TO_TEXT_DIR = 'C:\\Program Files\\xpdf'
    
    # Windows command to start pdftotext.
    PDF_TO_TEXT_CMD = 'pdftotext.exe'

